globals [tax_revenue
         taxshare
         fraction_paying_tax
         log_changes
         old_mean_wealth
         median_taxbase]
turtles-own [wealth
             wealth_list
             wealth_return
             taxbase
             tax
             wealth_on_acquisition
             inbottom50
             in50to90
             intop10
             intop1
             intop01]

to setup
  clear-all
  ask patches [ set pcolor white ]
  create-turtles N [
    initialize
  ]
  set old_mean_wealth mean [wealth] of turtles
  set log_changes (list)
  visualize
  reset-ticks
end

to initialize
  if visualize_world [setxy random-xcor random-ycor]
  set shape "face happy"
  set wealth 1
  set wealth_list (list)
  set wealth_on_acquisition wealth
  set inbottom50 (list)
  set in50to90 (list)
  set intop10 (list)
  set intop1 (list)
  set intop01 (list)
end

to go
  turtles_wealth_returns
  turtles_tax
  turtles_new_wealth
  update_data
  visualize
  tick
  if (ticks = stop_tick) [stop]
end

to turtles_wealth_returns
  ask turtles [ set wealth_return wealth * ((random-growth-factor mu sigma) - 1) ]
end

to turtles_tax
  ; set taxbase for the purpose of computing a dynamic allowance threshold
  ; based on its median and allowance_fraction_median
  ask turtles[ set taxbase (ifelse-value
    (tax_regime = "wealth")
      [ wealth + wealth_return ]
    (tax_regime = "wealth gains")
      [ max list (wealth_return) 0 ]
    (tax_regime = "realized wealth gains" and wealth + wealth_return >= realization_scale * wealth_on_acquisition)
      [wealth + wealth_return - wealth_on_acquisition]
      [0]
    )
  ]
  set median_taxbase median [taxbase] of turtles with [taxbase > 0]
  ; important: the median taxbase is only taken for those whose taxbase is not zero!
  ; set tax of individuals
  ask turtles [ set tax taxrate * max list 0 (taxbase - median_taxbase * allowance_fraction_median) ]
end

to turtles_new_wealth
  set tax_revenue sum [tax] of turtles
  ask turtles [
    set wealth (wealth + wealth_return - tax + tax_revenue / count turtles)
  ]
  ask turtles [
    if (tax_regime = "realized wealth gains" and tax > 0) [
      set wealth_on_acquisition wealth
    ]
  ]
end

to update_data
  set taxshare tax_revenue / sum [wealth] of turtles
  set fraction_paying_tax count turtles with [tax > 0] / count turtles
  set log_changes fput (ln mean [ wealth ] of turtles - ln old_mean_wealth) log_changes
  set old_mean_wealth mean [ wealth ] of turtles
  let sorted-wealth reverse sort [wealth] of turtles
  ask turtles [
    let quantile_top50 item round (0.5 * count turtles) sorted-wealth
    let quantile_top10 item round (0.1 * count turtles) sorted-wealth
    let quantile_top1 item round (0.01 * count turtles) sorted-wealth
    let quantile_top01 item round (0.001 * count turtles) sorted-wealth
    set inbottom50 fput (wealth <= quantile_top50) inbottom50
    set in50to90 fput (wealth > quantile_top50 and wealth <= quantile_top10) in50to90
    set intop10 fput (wealth > quantile_top10) intop10
    set intop1 fput (wealth > quantile_top1) intop1
    set intop01 fput (wealth > quantile_top01) intop01
    set wealth_list fput wealth wealth_list
  ]
end

to visualize
  if visualize_world [
    if standard-deviation [xcor] of turtles = 0 [ ask turtles [setxy random-xcor random-ycor]]
    ask turtles [
      set size ifelse-value (wealth < 0.3) [0.3] [sqrt wealth]
    ]
  ]
end

to-report volatility_int
  report (ifelse-value volatility_interval = "past_tick_1" [past_tick_1] volatility_interval = "past_tick_2" [past_tick_2] [past_tick_3])
end
to-report immobility_int
  report (ifelse-value immobility_interval = "past_tick_1" [past_tick_1] immobility_interval = "past_tick_2" [past_tick_2] [past_tick_3])
end
to-report autocorrelation_int
  report (ifelse-value autocorrelation_lag = "past_tick_1" [past_tick_1] autocorrelation_lag = "past_tick_2" [past_tick_2] [past_tick_3])
end

;;; Model reporters

to-report random-growth-factor [mu_ sigma_]
  report exp (mu_ - sigma_ ^ 2 / 2 + sigma_ * random-shock)
end

to-report random-shock
  report ifelse-value (distribution_shocks = "normal") [random-normal 0 1] [random-exponential sqrt 0.5 - random-exponential sqrt 0.5]
  ; Notes:
  ; Laplace(0,b) can be generated by a diff of 2 iid draws from Exponential(1/b)
  ; Laplace has variance 2*b^2. We want to have shocks having variance 1, so b = sqrt(1/2)
end

;;; Output reporters

to-report gini [w]
 report (2 * sum (map [ [x y] -> x * y ]
                 n-values N [ x -> x + 1 ]
                 sort w) )
                 / (N * (sum w)) - (N + 1) / N
end

to-report tail-exponent-fit [w]
  let threshold fit-threshold w
  set w filter [x -> x > threshold] w
  report 1 + length w / sum map [x -> ln (x / threshold)] w
end

to-report fit-threshold [w]
  report quantile w (1 - quantile_fit)
end

to-report num-wealth-above-threshold [w]
  report length filter [x -> x > fit-threshold w] w
end

to-report wealth-fraction-top [w topshare]
  report sum (sublist (reverse sort w) 0 round (topshare * count turtles)) / sum w
end


to-report quantile [ data-list quantile-level ]
  let sorted-list sort data-list
  let index (length sorted-list * quantile-level) - 1
  let lower-index floor index
  let upper-index ceiling index
  ifelse lower-index = upper-index [
    report item lower-index sorted-list
  ] [
    let lower-value item lower-index sorted-list
    let upper-value item upper-index sorted-list
    let interpolation-factor (index - lower-index)
    report lower-value + interpolation-factor * (upper-value - lower-value)
  ]
end

;;; For behavior space

to-report tail_exponent_pdf report tail-exponent-fit [wealth] of turtles end
to-report immobility_bottom50 [interval] report count turtles with [item 0 inbottom50 and item interval inbottom50] / count turtles with [item 0 inbottom50] end
to-report immobility_50to90 [interval] report count turtles with [item 0 in50to90 and item interval in50to90] / count turtles with [item 0 in50to90] end
to-report immobility_top10 [interval] report count turtles with [item 0 intop10 and item interval intop10] / count turtles with [item 0 intop10] end
to-report immobility_top1 [interval] report count turtles with [item 0 intop1 and item interval intop1] / count turtles with [item 0 intop1] end
to-report immobility_top01 [interval] report count turtles with [item 0 intop01 and item interval intop01] / count turtles with [item 0 intop01] end
to-report longterm_growth_rate report exp ((ln mean [wealth] of turtles) / ticks) end
to-report sd_log_changes [interval] report ifelse-value (length log_changes < 2) [0] [standard-deviation sublist log_changes 0 min (list interval length log_changes)] end
to-report gini_all report gini [wealth] of turtles end
to-report share_top_10 report wealth-fraction-top [wealth] of turtles 0.1 end
to-report share_top_1 report wealth-fraction-top [wealth] of turtles 0.01 end
to-report share_top report max [wealth] of turtles / sum [wealth] of turtles end
to-report fraction_in_fit report num-wealth-above-threshold [wealth] of turtles / count turtles end
to-report fraction_above_mean report count turtles with [wealth > mean [wealth] of turtles] / count turtles end

to-report correlation [x y]
  let covariance mean (map [[a b] -> (a - mean x) * (b - mean y)] x y)
  report covariance / (standard-deviation x * standard-deviation y)
end
to-report autocorrelation [lag]
  report correlation map [turt -> ifelse-value (autocorr_log_wealth?) [[(log (item 0 wealth_list) 10)] of turt] [[(item 0 wealth_list)] of turt]] sort-on [who] turtles
                     map [turt -> ifelse-value (autocorr_log_wealth?) [[(log (item lag wealth_list) 10)] of turt] [[(item lag wealth_list)] of turt]] sort-on [who] turtles
end

to-report normal-pdf [x m s]
  report (1 / (s * sqrt (2 * pi))) * exp (-0.5 * ((x - m) / s) ^ 2)
end
@#$#@#$#@
GRAPHICS-WINDOW
290
10
568
289
-1
-1
8.2
1
10
1
1
1
0
0
0
1
-16
16
-16
16
1
1
1
ticks
30.0

SLIDER
5
360
270
393
taxrate
taxrate
0
0.4
0.03
0.001
1
NIL
HORIZONTAL

SLIDER
85
35
262
68
N
N
10
10000
3000.0
10
1
NIL
HORIZONTAL

BUTTON
5
34
79
67
NIL
Setup
NIL
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

BUTTON
4
231
66
264
Go
go
T
1
T
OBSERVER
NIL
NIL
NIL
NIL
1

PLOT
579
8
861
128
mean wealth
NIL
NIL
0.0
10.0
0.0
2.0
true
false
"" ""
PENS
"mean wealth" 1.0 0 -16777216 true "" "plot mean [wealth] of turtles"

PLOT
580
512
863
633
wealth inequality (Gini)
NIL
NIL
0.0
10.0
0.0
1.0
true
false
"" ""
PENS
"default" 1.0 0 -16777216 true "" "plot ( 2 * sum (map [ [x y] -> x * y ] \n                 n-values N [ x -> x + 1 ] \n                 sort [wealth] of turtles) )\n      / (N * (sum [wealth] of turtles)) - (N + 1) / N"

MONITOR
862
52
1011
97
long term growth rate
longterm_growth_rate
5
1
11

TEXTBOX
8
7
298
32
Input parameters
18
0.0
1

TEXTBOX
10
210
200
231
Taxation and redistribution
12
0.0
1

MONITOR
862
8
1011
53
mean wealth
mean [wealth] of turtles
5
1
11

PLOT
290
294
570
464
wealth distribution (inverse cdf)
NIL
NIL
0.0
10.0
-1.0
0.1
false
false
"clear-plot" "if (ticks mod 201 = 0) [clear-plot]"
PENS
"default" 1.0 0 -16777216 true "; clear-plot\nset-plot-x-range (floor (min [log wealth 10] of turtles)) (1 + ceiling max [log wealth 10] of turtles)\nset-plot-y-range precision (log (1 - (count turtles - 1) / count turtles) 10) 1 - 0.1 (0)" "let sorted-wealths sort [wealth] of turtles\nplot-pen-up\nplotxy log (item 0 sorted-wealths) 10 (0)\nplot-pen-down\nset-plot-pen-color ticks\nforeach n-values (length sorted-wealths) [i -> i] [id -> plotxy (log (item id sorted-wealths) 10) log (1 - (id) / length sorted-wealths) 10]"
"mean" 1.0 0 -7500403 true "clear-plot" "if (ticks = stop_tick) [\n  plotxy (log (fit-threshold [wealth] of turtles) 10) 0 - precision (log N 10) 1\n  plotxy (log (fit-threshold [wealth] of turtles) 10) 0\n]\nset-plot-x-range (floor (min [log wealth 10] of turtles)) (1 + ceiling max [log wealth 10] of turtles)\nset-plot-y-range precision (log (1 - (count turtles - 1) / count turtles) 10) 1 - 0.2 (0)\nset-plot-pen-color ticks\n\n"

PLOT
410
509
570
629
tail exponent
NIL
NIL
0.0
10.0
-5.0
-0.5
true
false
"" "set-plot-y-range 0.5 5"
PENS
"default" 1.0 0 -16777216 true "" "if (ticks > 0) [plot tail-exponent-fit [wealth] of turtles]"

MONITOR
431
464
571
509
tail exponent (cdf)
(tail-exponent-fit [wealth] of turtles) - 1
3
1
11

SLIDER
5
95
135
128
mu
mu
-0.5
0.5
0.02
0.005
1
NIL
HORIZONTAL

SLIDER
140
95
270
128
sigma
sigma
0
1
0.3
0.01
1
NIL
HORIZONTAL

MONITOR
140
155
270
200
time average growth
exp (mu - sigma ^ 2 / 2)
5
1
11

CHOOSER
72
231
267
276
tax_regime
tax_regime
"wealth" "wealth gains" "realized wealth gains"
1

TEXTBOX
12
76
287
94
Wealth: Random mutliplicative growth
12
0.0
1

MONITOR
864
512
934
557
Gini
gini_all
5
1
11

PLOT
580
634
864
771
wealth shares
NIL
NIL
0.0
10.0
0.0
1.0
true
false
"" ""
PENS
"Top 10%" 1.0 0 -16777216 true "" "plot wealth-fraction-top [wealth] of turtles 0.1"
"Top 1%" 1.0 0 -2674135 true "" "plot wealth-fraction-top [wealth] of turtles 0.01"
"Top" 1.0 0 -955883 true "" "plot max [wealth] of turtles / sum [wealth] of turtles"

MONITOR
864
634
924
679
Top 10%
share_top_10
3
1
11

MONITOR
864
679
924
724
Top 1%
share_top_1
3
1
11

MONITOR
864
724
924
769
Top
share_top
3
1
11

CHOOSER
9
710
198
755
distribution_shocks
distribution_shocks
"normal" "double exponential"
0

MONITOR
862
383
929
428
volatility
sd_log_changes volatility_int
5
1
11

PLOT
580
383
862
503
volatity
NIL
NIL
0.0
10.0
0.0
0.01
true
false
"" ""
PENS
"default" 1.0 0 -16777216 true "" "plot sd_log_changes volatility_int"

PLOT
580
263
862
383
log change
NIL
NIL
0.0
10.0
-0.001
0.001
true
false
"" ""
PENS
"log change" 1.0 0 -16777216 true "" "plot ifelse-value (ticks > 0) [first log_changes] [0]"
"zero" 1.0 0 -7500403 true "" "plot 0"

INPUTBOX
1053
48
1133
113
stop_tick
200.0
1
0
Number

SLIDER
290
464
432
497
quantile_fit
quantile_fit
0.01
0.1
0.1
0.01
1
NIL
HORIZONTAL

MONITOR
292
511
374
556
frac > mean
fraction_above_mean
3
1
11

MONITOR
5
155
135
200
ensemble growth
exp mu
5
1
11

INPUTBOX
1133
48
1213
113
past_tick_1
50.0
1
0
Number

INPUTBOX
1133
114
1213
179
past_tick_2
25.0
1
0
Number

INPUTBOX
1133
178
1213
243
past_tick_3
10.0
1
0
Number

SWITCH
1054
8
1214
41
visualize_world
visualize_world
0
1
-1000

PLOT
862
263
1079
383
log changes distribution
NIL
NIL
-0.5
0.5
0.0
10.0
true
false
"" "clear-plot"
PENS
"histogram" 0.01 1 -16777216 true "" "if ticks > 1 [histogram log_changes]"
"normal pdf" 1.0 0 -8630108 true "" "if ticks > 1 [\n  let num-points 100 ; Adjust for smoother/faster plots\n  let x-step (plot-x-max - plot-x-min) / num-points\n  let x-values (range plot-x-min (plot-x-max) x-step)\n  foreach x-values [x ->\n    plotxy x length log_changes * x-step * normal-pdf x mean log_changes standard-deviation log_changes\n  ]\n]"

SLIDER
71
279
268
312
realization_scale
realization_scale
1
5
1.5
0.1
1
NIL
HORIZONTAL

MONITOR
862
128
947
173
NIL
taxshare
4
1
11

PLOT
579
128
862
255
taxshare
NIL
NIL
0.0
10.0
0.0
0.01
true
false
"" ""
PENS
"default" 1.0 0 -16777216 true "" "plot taxshare"

CHOOSER
1095
390
1238
435
immobility_interval
immobility_interval
"past_tick_1" "past_tick_2" "past_tick_3"
0

CHOOSER
928
383
1079
428
volatility_interval
volatility_interval
"past_tick_1" "past_tick_2" "past_tick_3"
1

MONITOR
862
174
982
219
fraction paying tax
fraction_paying_tax
4
1
11

PLOT
958
437
1160
621
immobility
NIL
NIL
0.0
10.0
0.0
1.0
true
false
"" ""
PENS
"Top 1%" 1.0 0 -2674135 true "" "plot ifelse-value (ticks > immobility_int) [immobility_top1 immobility_int] [0]"
"Top 10%" 1.0 0 -16777216 true "" "plot ifelse-value (ticks > immobility_int) [immobility_top10 immobility_int] [0]"
"50-90%" 1.0 0 -13345367 true "" "plot ifelse-value (ticks > immobility_int) [immobility_50to90 immobility_int] [0]"
"Bottom 50%" 1.0 0 -10899396 true "" "plot ifelse-value (ticks > immobility_int) [immobility_bottom50 immobility_int] [0]"

MONITOR
1159
437
1238
482
Bottom 50%
immobility_bottom50 immobility_int
4
1
11

MONITOR
1159
483
1238
528
50%-90%
immobility_50to90 immobility_int
4
1
11

MONITOR
1159
529
1238
574
Top 10%
immobility_top10 immobility_int
4
1
11

MONITOR
1159
574
1238
619
Top 1%
immobility_top1 immobility_int
4
1
11

SLIDER
4
320
269
353
allowance_fraction_median
allowance_fraction_median
0
10
0.0
0.1
1
NIL
HORIZONTAL

TEXTBOX
10
135
160
153
Theoretical growth factors
12
0.0
1

MONITOR
1180
625
1240
670
autocor
autocorrelation autocorrelation_int
4
1
11

PLOT
955
670
1240
835
autocorrelation wealth individuals
NIL
NIL
0.0
10.0
0.0
1.0
true
false
"" ""
PENS
"3" 1.0 0 -16777216 true "" "plot autocorrelation autocorrelation_int"

CHOOSER
1030
625
1177
670
autocorrelation_lag
autocorrelation_lag
"past_tick_1" "past_tick_2" "past_tick_3"
0

SWITCH
1065
835
1240
868
autocorr_log_wealth?
autocorr_log_wealth?
0
1
-1000

@#$#@#$#@
## WHAT IS IT?

(a general understanding of what the model is trying to show or explain)

## HOW IT WORKS

(what rules the agents use to create the overall behavior of the model)

## HOW TO USE IT

(how to use the model, including a description of each of the items in the Interface tab)

## THINGS TO NOTICE

(suggested things for the user to notice while running the model)

## THINGS TO TRY

(suggested things for the user to try to do (move sliders, switches, etc.) with the model)

## EXTENDING THE MODEL

(suggested things to add or change in the Code tab to make the model more complicated, detailed, accurate, etc.)

## NETLOGO FEATURES

(interesting or unusual features of NetLogo that the model uses, particularly in the Code tab; or where workarounds were needed for missing features)

## RELATED MODELS

(models in the NetLogo Models Library and elsewhere which are of related interest)

## CREDITS AND REFERENCES

(a reference to the model's URL on the web if it has one, as well as any other necessary credits, citations, and links)
@#$#@#$#@
default
true
0
Polygon -7500403 true true 150 5 40 250 150 205 260 250

airplane
true
0
Polygon -7500403 true true 150 0 135 15 120 60 120 105 15 165 15 195 120 180 135 240 105 270 120 285 150 270 180 285 210 270 165 240 180 180 285 195 285 165 180 105 180 60 165 15

arrow
true
0
Polygon -7500403 true true 150 0 0 150 105 150 105 293 195 293 195 150 300 150

box
false
0
Polygon -7500403 true true 150 285 285 225 285 75 150 135
Polygon -7500403 true true 150 135 15 75 150 15 285 75
Polygon -7500403 true true 15 75 15 225 150 285 150 135
Line -16777216 false 150 285 150 135
Line -16777216 false 150 135 15 75
Line -16777216 false 150 135 285 75

bug
true
0
Circle -7500403 true true 96 182 108
Circle -7500403 true true 110 127 80
Circle -7500403 true true 110 75 80
Line -7500403 true 150 100 80 30
Line -7500403 true 150 100 220 30

butterfly
true
0
Polygon -7500403 true true 150 165 209 199 225 225 225 255 195 270 165 255 150 240
Polygon -7500403 true true 150 165 89 198 75 225 75 255 105 270 135 255 150 240
Polygon -7500403 true true 139 148 100 105 55 90 25 90 10 105 10 135 25 180 40 195 85 194 139 163
Polygon -7500403 true true 162 150 200 105 245 90 275 90 290 105 290 135 275 180 260 195 215 195 162 165
Polygon -16777216 true false 150 255 135 225 120 150 135 120 150 105 165 120 180 150 165 225
Circle -16777216 true false 135 90 30
Line -16777216 false 150 105 195 60
Line -16777216 false 150 105 105 60

car
false
0
Polygon -7500403 true true 300 180 279 164 261 144 240 135 226 132 213 106 203 84 185 63 159 50 135 50 75 60 0 150 0 165 0 225 300 225 300 180
Circle -16777216 true false 180 180 90
Circle -16777216 true false 30 180 90
Polygon -16777216 true false 162 80 132 78 134 135 209 135 194 105 189 96 180 89
Circle -7500403 true true 47 195 58
Circle -7500403 true true 195 195 58

circle
false
0
Circle -7500403 true true 0 0 300

circle 2
false
0
Circle -7500403 true true 0 0 300
Circle -16777216 true false 30 30 240

cow
false
0
Polygon -7500403 true true 200 193 197 249 179 249 177 196 166 187 140 189 93 191 78 179 72 211 49 209 48 181 37 149 25 120 25 89 45 72 103 84 179 75 198 76 252 64 272 81 293 103 285 121 255 121 242 118 224 167
Polygon -7500403 true true 73 210 86 251 62 249 48 208
Polygon -7500403 true true 25 114 16 195 9 204 23 213 25 200 39 123

cylinder
false
0
Circle -7500403 true true 0 0 300

dot
false
0
Circle -7500403 true true 90 90 120

face happy
false
0
Circle -7500403 true true 8 8 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Polygon -16777216 true false 150 255 90 239 62 213 47 191 67 179 90 203 109 218 150 225 192 218 210 203 227 181 251 194 236 217 212 240

face neutral
false
0
Circle -7500403 true true 8 7 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Rectangle -16777216 true false 60 195 240 225

face sad
false
0
Circle -7500403 true true 8 8 285
Circle -16777216 true false 60 75 60
Circle -16777216 true false 180 75 60
Polygon -16777216 true false 150 168 90 184 62 210 47 232 67 244 90 220 109 205 150 198 192 205 210 220 227 242 251 229 236 206 212 183

fish
false
0
Polygon -1 true false 44 131 21 87 15 86 0 120 15 150 0 180 13 214 20 212 45 166
Polygon -1 true false 135 195 119 235 95 218 76 210 46 204 60 165
Polygon -1 true false 75 45 83 77 71 103 86 114 166 78 135 60
Polygon -7500403 true true 30 136 151 77 226 81 280 119 292 146 292 160 287 170 270 195 195 210 151 212 30 166
Circle -16777216 true false 215 106 30

flag
false
0
Rectangle -7500403 true true 60 15 75 300
Polygon -7500403 true true 90 150 270 90 90 30
Line -7500403 true 75 135 90 135
Line -7500403 true 75 45 90 45

flower
false
0
Polygon -10899396 true false 135 120 165 165 180 210 180 240 150 300 165 300 195 240 195 195 165 135
Circle -7500403 true true 85 132 38
Circle -7500403 true true 130 147 38
Circle -7500403 true true 192 85 38
Circle -7500403 true true 85 40 38
Circle -7500403 true true 177 40 38
Circle -7500403 true true 177 132 38
Circle -7500403 true true 70 85 38
Circle -7500403 true true 130 25 38
Circle -7500403 true true 96 51 108
Circle -16777216 true false 113 68 74
Polygon -10899396 true false 189 233 219 188 249 173 279 188 234 218
Polygon -10899396 true false 180 255 150 210 105 210 75 240 135 240

house
false
0
Rectangle -7500403 true true 45 120 255 285
Rectangle -16777216 true false 120 210 180 285
Polygon -7500403 true true 15 120 150 15 285 120
Line -16777216 false 30 120 270 120

leaf
false
0
Polygon -7500403 true true 150 210 135 195 120 210 60 210 30 195 60 180 60 165 15 135 30 120 15 105 40 104 45 90 60 90 90 105 105 120 120 120 105 60 120 60 135 30 150 15 165 30 180 60 195 60 180 120 195 120 210 105 240 90 255 90 263 104 285 105 270 120 285 135 240 165 240 180 270 195 240 210 180 210 165 195
Polygon -7500403 true true 135 195 135 240 120 255 105 255 105 285 135 285 165 240 165 195

line
true
0
Line -7500403 true 150 0 150 300

line half
true
0
Line -7500403 true 150 0 150 150

pentagon
false
0
Polygon -7500403 true true 150 15 15 120 60 285 240 285 285 120

person
false
0
Circle -7500403 true true 110 5 80
Polygon -7500403 true true 105 90 120 195 90 285 105 300 135 300 150 225 165 300 195 300 210 285 180 195 195 90
Rectangle -7500403 true true 127 79 172 94
Polygon -7500403 true true 195 90 240 150 225 180 165 105
Polygon -7500403 true true 105 90 60 150 75 180 135 105

plant
false
0
Rectangle -7500403 true true 135 90 165 300
Polygon -7500403 true true 135 255 90 210 45 195 75 255 135 285
Polygon -7500403 true true 165 255 210 210 255 195 225 255 165 285
Polygon -7500403 true true 135 180 90 135 45 120 75 180 135 210
Polygon -7500403 true true 165 180 165 210 225 180 255 120 210 135
Polygon -7500403 true true 135 105 90 60 45 45 75 105 135 135
Polygon -7500403 true true 165 105 165 135 225 105 255 45 210 60
Polygon -7500403 true true 135 90 120 45 150 15 180 45 165 90

sheep
false
0
Rectangle -7500403 true true 151 225 180 285
Rectangle -7500403 true true 47 225 75 285
Rectangle -7500403 true true 15 75 210 225
Circle -7500403 true true 135 75 150
Circle -16777216 true false 165 76 116

square
false
0
Rectangle -7500403 true true 30 30 270 270

square 2
false
0
Rectangle -7500403 true true 30 30 270 270
Rectangle -16777216 true false 60 60 240 240

star
false
0
Polygon -7500403 true true 151 1 185 108 298 108 207 175 242 282 151 216 59 282 94 175 3 108 116 108

target
false
0
Circle -7500403 true true 0 0 300
Circle -16777216 true false 30 30 240
Circle -7500403 true true 60 60 180
Circle -16777216 true false 90 90 120
Circle -7500403 true true 120 120 60

tree
false
0
Circle -7500403 true true 118 3 94
Rectangle -6459832 true false 120 195 180 300
Circle -7500403 true true 65 21 108
Circle -7500403 true true 116 41 127
Circle -7500403 true true 45 90 120
Circle -7500403 true true 104 74 152

triangle
false
0
Polygon -7500403 true true 150 30 15 255 285 255

triangle 2
false
0
Polygon -7500403 true true 150 30 15 255 285 255
Polygon -16777216 true false 151 99 225 223 75 224

truck
false
0
Rectangle -7500403 true true 4 45 195 187
Polygon -7500403 true true 296 193 296 150 259 134 244 104 208 104 207 194
Rectangle -1 true false 195 60 195 105
Polygon -16777216 true false 238 112 252 141 219 141 218 112
Circle -16777216 true false 234 174 42
Rectangle -7500403 true true 181 185 214 194
Circle -16777216 true false 144 174 42
Circle -16777216 true false 24 174 42
Circle -7500403 false true 24 174 42
Circle -7500403 false true 144 174 42
Circle -7500403 false true 234 174 42

turtle
true
0
Polygon -10899396 true false 215 204 240 233 246 254 228 266 215 252 193 210
Polygon -10899396 true false 195 90 225 75 245 75 260 89 269 108 261 124 240 105 225 105 210 105
Polygon -10899396 true false 105 90 75 75 55 75 40 89 31 108 39 124 60 105 75 105 90 105
Polygon -10899396 true false 132 85 134 64 107 51 108 17 150 2 192 18 192 52 169 65 172 87
Polygon -10899396 true false 85 204 60 233 54 254 72 266 85 252 107 210
Polygon -7500403 true true 119 75 179 75 209 101 224 135 220 225 175 261 128 261 81 224 74 135 88 99

wheel
false
0
Circle -7500403 true true 3 3 294
Circle -16777216 true false 30 30 240
Line -7500403 true 150 285 150 15
Line -7500403 true 15 150 285 150
Circle -7500403 true true 120 120 60
Line -7500403 true 216 40 79 269
Line -7500403 true 40 84 269 221
Line -7500403 true 40 216 269 79
Line -7500403 true 84 40 221 269

x
false
0
Polygon -7500403 true true 270 75 225 30 30 225 75 270
Polygon -7500403 true true 30 75 75 30 270 225 225 270
@#$#@#$#@
NetLogo 6.4.0
@#$#@#$#@
@#$#@#$#@
@#$#@#$#@
<experiments>
  <experiment name="experiment tax wealth" repetitions="100" runMetricsEveryStep="false">
    <setup>setup</setup>
    <go>go</go>
    <metric>tail_exponent_pdf</metric>
    <metric>stay_in_top_10</metric>
    <metric>longterm_growth_rate</metric>
    <metric>sd_log_changes</metric>
    <metric>gini_all</metric>
    <metric>share_top_10</metric>
    <metric>share_top_1</metric>
    <metric>share_top</metric>
    <enumeratedValueSet variable="mu">
      <value value="0.02"/>
    </enumeratedValueSet>
    <steppedValueSet variable="taxrate" first="0" step="0.001" last="0.05"/>
    <enumeratedValueSet variable="mean_factor_fit">
      <value value="1"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="N">
      <value value="1000"/>
      <value value="10000"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="sigma">
      <value value="0.3"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="tax_regime">
      <value value="&quot;wealth&quot;"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="stop_tick">
      <value value="200"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="mobility_interval">
      <value value="15"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="volatility_interval">
      <value value="50"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="distribution_shocks">
      <value value="&quot;normal&quot;"/>
    </enumeratedValueSet>
  </experiment>
  <experiment name="experiment tax wealth gains" repetitions="100" runMetricsEveryStep="false">
    <setup>setup</setup>
    <go>go</go>
    <metric>tail_exponent_pdf</metric>
    <metric>stay_in_top_10</metric>
    <metric>longterm_growth_rate</metric>
    <metric>sd_log_changes</metric>
    <metric>gini_all</metric>
    <metric>share_top_10</metric>
    <metric>share_top_1</metric>
    <metric>share_top</metric>
    <enumeratedValueSet variable="mu">
      <value value="0.02"/>
    </enumeratedValueSet>
    <steppedValueSet variable="taxrate" first="0" step="0.005" last="0.25"/>
    <enumeratedValueSet variable="mean_factor_fit">
      <value value="1"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="N">
      <value value="1000"/>
      <value value="10000"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="sigma">
      <value value="0.3"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="tax_regime">
      <value value="&quot;wealth gains&quot;"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="stop_tick">
      <value value="200"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="mobility_interval">
      <value value="15"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="volatility_interval">
      <value value="50"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="distribution_shocks">
      <value value="&quot;normal&quot;"/>
    </enumeratedValueSet>
  </experiment>
  <experiment name="experiment both" repetitions="100" runMetricsEveryStep="false">
    <setup>setup</setup>
    <go>go</go>
    <metric>tail_exponent_pdf</metric>
    <metric>stay_in_top_10</metric>
    <metric>longterm_growth_rate</metric>
    <metric>sd_log_changes</metric>
    <metric>gini_all</metric>
    <metric>share_top_10</metric>
    <metric>share_top_1</metric>
    <metric>share_top</metric>
    <enumeratedValueSet variable="mu">
      <value value="0.02"/>
    </enumeratedValueSet>
    <steppedValueSet variable="taxrate" first="0" step="0.005" last="0.1"/>
    <enumeratedValueSet variable="mean_factor_fit">
      <value value="1"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="N">
      <value value="1000"/>
      <value value="2000"/>
      <value value="5000"/>
      <value value="10000"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="sigma">
      <value value="0.3"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="tax_regime">
      <value value="&quot;wealth&quot;"/>
      <value value="&quot;capital income&quot;"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="stop_tick">
      <value value="200"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="mobility_interval">
      <value value="15"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="volatility_interval">
      <value value="50"/>
    </enumeratedValueSet>
    <enumeratedValueSet variable="distribution_shocks">
      <value value="&quot;normal&quot;"/>
    </enumeratedValueSet>
  </experiment>
</experiments>
@#$#@#$#@
@#$#@#$#@
default
0.0
-0.2 0 0.0 1.0
0.0 1 1.0 0.0
0.2 0 0.0 1.0
link direction
true
0
Line -7500403 true 150 150 90 180
Line -7500403 true 150 150 210 180
@#$#@#$#@
1
@#$#@#$#@
